using System.Runtime.InteropServices;
using CommonUtils.Audio;
using PresetConverterProject.NIKontaktNKS;
using Xunit;
using Xunit.Abstractions;

namespace TestProject
{
    public class BitProcessTests
    {
        private readonly ITestOutputHelper output;

        public BitProcessTests(ITestOutputHelper output)
        {
            this.output = output;
        }


        [Fact]
        public void TestRead24Bit()
        {
            // 11 bits x 64 = 704 bytes of 24 bit ncw samples
            // base 0, bits 11, flags 0
            byte[] inputArray = {
                0x00, 0x10, 0x00, 0x01, 0x0C, 0x90, 0x00, 0x05, 0x2C, 0xC0, 0x01, 0x13,
                0x80, 0xC0, 0x04, 0x2C, 0x10, 0x01, 0x0B, 0x4C, 0x40, 0x02, 0x1A, 0xA0,
                0x00, 0x05, 0x2E, 0x20, 0x02, 0x15, 0xE0, 0x20, 0x06, 0x28, 0x70, 0xC1,
                0x08, 0x40, 0x00, 0x84, 0x10, 0xCC, 0x5F, 0x00, 0x17, 0x90, 0x40, 0xFC,
                0x79, 0x90, 0x03, 0x22, 0x40, 0x81, 0x08, 0x6A, 0x40, 0x82, 0x02, 0x9A,
                0x2F, 0x7C, 0x1A, 0x60, 0xC2, 0x04, 0x3D, 0xE0, 0x81, 0x01, 0x34, 0xE0,
                0x01, 0x0D, 0x24, 0x20, 0x02, 0xC4, 0x6F, 0x7E, 0x10, 0x54, 0x1F, 0xFC,
                0x2E, 0x94, 0x3E, 0xEE, 0xE3, 0x6F, 0x41, 0x00, 0xE4, 0xAE, 0x75, 0xC6,
                0x47, 0xFE, 0xEE, 0x2A, 0xA8, 0x43, 0x05, 0x7A, 0x30, 0x08, 0x29, 0x34,
                0xC0, 0xFD, 0x28, 0xE8, 0x03, 0x21, 0x34, 0x3F, 0xF8, 0x1A, 0xDC, 0x5F,
                0xEB, 0x88, 0x2F, 0x04, 0x08, 0x72, 0x6F, 0xFF, 0x2A, 0x30, 0xA2, 0x11,
                0x09, 0xD8, 0xC7, 0x63, 0xE8, 0x01, 0x00, 0xF2, 0x63, 0x5F, 0xE4, 0x7B,
                0x2F, 0xBF, 0xDF, 0x8F, 0xCD, 0x6A, 0xD7, 0x3F, 0x3E, 0xE7, 0xDB, 0x1F,
                0xC2, 0x06, 0xDC, 0xFE, 0xFF, 0x71, 0x08, 0x40, 0xE9, 0xD9, 0x2F, 0x02,
                0xD8, 0x4B, 0x0E, 0x79, 0x06, 0x6C, 0xA3, 0x16, 0x4A, 0x80, 0xC3, 0xF3,
                0x77, 0xAD, 0xE7, 0x77, 0x33, 0xDE, 0xF3, 0x8F, 0x8F, 0xFC, 0xF0, 0xF5,
                0x6E, 0xF3, 0xC8, 0x77, 0x3F, 0xF2, 0x8F, 0x78, 0x07, 0xD0, 0xDD, 0x9C,
                0x80, 0x06, 0x04, 0x5E, 0x03, 0xFC, 0x5F, 0x80, 0x45, 0xDE, 0xC1, 0x82,
                0xF2, 0xC7, 0x7F, 0x17, 0x61, 0x0F, 0xF5, 0xEE, 0x41, 0x50, 0xED, 0xF2,
                0x23, 0x05, 0x12, 0x87, 0x3F, 0x43, 0x4A, 0x60, 0xC1, 0x8E, 0x0D, 0xE4,
                0xE3, 0x02, 0x28, 0xD0, 0x44, 0xFF, 0x55, 0xE1, 0x89, 0xBD, 0x24, 0x01,
                0xF4, 0xB6, 0x77, 0xBA, 0x8C, 0xB5, 0xED, 0xFF, 0x7B, 0xEF, 0x58, 0xE1,
                0x22, 0x98, 0x77, 0xAA, 0xC3, 0x8E, 0x88, 0x93, 0x1C, 0x23, 0x1F, 0x46,
                0x90, 0x06, 0x40, 0xB4, 0xEE, 0x68, 0xD4, 0x17, 0x1E, 0xEC, 0x19, 0x0F,
                0x70, 0xD7, 0x07, 0x20, 0x03, 0xE3, 0xCF, 0xBF, 0x18, 0x79, 0x38, 0x83,
                0x76, 0x62, 0x33, 0xFC, 0xE5, 0xB3, 0xA5, 0x13, 0x45, 0xE7, 0xFF, 0xCA,
                0xF1, 0xAD, 0x81, 0x45, 0xDC, 0xDF, 0xF0, 0x01, 0xE0, 0x07, 0x1C, 0xD6,
                0x6E, 0x7D, 0xAC, 0xF4, 0x00, 0xFE, 0x04, 0xC9, 0x46, 0x4B, 0xFE, 0xA0,
                0x83, 0x20, 0xD0, 0x80, 0xCD, 0x6D, 0x06, 0xC6, 0x16, 0xC0, 0x4F, 0x89,
                0x0B, 0xA4, 0x5F, 0x34, 0x42, 0xE8, 0xB8, 0xD9, 0x51, 0xDF, 0x78, 0x89,
                0x17, 0x3C, 0xCA, 0xCA, 0x2E, 0xFE, 0x2B, 0x4A, 0x71, 0xF1, 0xF8, 0x6F,
                0x7F, 0xE1, 0xAE, 0x4F, 0x3C, 0xDA, 0x07, 0xC0, 0x7B, 0x43, 0xB0, 0xC3,
                0x1F, 0x4A, 0xB7, 0x76, 0x14, 0xFC, 0xBE, 0x7F, 0x4E, 0xC8, 0x60, 0xD7,
                0x8D, 0x1F, 0x3D, 0xB2, 0xC5, 0x6E, 0x0B, 0x3B, 0x0C, 0xDE, 0xE4, 0x20,
                0x68, 0x8D, 0x42, 0xB0, 0x8F, 0x87, 0x8F, 0x28, 0xC2, 0x17, 0x0E, 0xD1,
                0x78, 0xEF, 0x19, 0x11, 0xFE, 0x23, 0x6B, 0xF9, 0xFB, 0x73, 0x90, 0x3D,
                0xF6, 0x41, 0x24, 0xA0, 0xA6, 0x04, 0x04, 0x2C, 0xD0, 0xE9, 0x81, 0x21,
                0x62, 0x61, 0x80, 0x43, 0x33, 0xDA, 0x02, 0xC4, 0x0F, 0x34, 0x98, 0x55,
                0x4E, 0x7C, 0x5A, 0x2C, 0x1F, 0xDC, 0x2C, 0xE8, 0xCA, 0x55, 0x20, 0xD2,
                0xFF, 0xE9, 0x97, 0xC0, 0x2B, 0x83, 0x31, 0x44, 0xF5, 0xF5, 0x71, 0x8B,
                0xD3, 0x5F, 0x9A, 0xDA, 0x8C, 0x37, 0xC5, 0xB5, 0x53, 0x1E, 0x78, 0x6E,
                0x44, 0xBE, 0x09, 0xBB, 0x10, 0x06, 0xE4, 0x4B, 0x2E, 0x01, 0x47, 0xE4,
                0x60, 0x17, 0x76, 0xF0, 0x3D, 0xE5, 0x05, 0x2C, 0xE5, 0xDF, 0xCF, 0x02,
                0x00, 0x8F, 0xA0, 0x4B, 0xB7, 0xA2, 0x74, 0x83, 0xF6, 0xCF, 0xE3, 0x06,
                0x11, 0x07, 0x04, 0x2E, 0x52, 0x0F, 0x6B, 0x36, 0x2B, 0x9E, 0x03, 0x99,
                0xD0, 0x42, 0x63, 0xA4, 0xE3, 0x99, 0x41, 0x5C, 0x62, 0x09, 0x9A, 0x78,
                0xB7, 0x99, 0x4F, 0xE0, 0x83, 0x58, 0x7B, 0x77, 0x02, 0x37, 0x27, 0xF9,
                0xCF, 0xD5, 0x4B, 0x6F, 0x0B, 0x78, 0x63, 0x17, 0x0F, 0x12, 0x51, 0x50,
                0x04, 0xB0, 0x7E, 0x32, 0x6C, 0xFA, 0xC4, 0xB6, 0x30, 0xBF, 0xBC, 0x69,
                0xBD, 0x6C, 0xB3, 0x4B, 0x3D, 0xFA, 0x26, 0xAF, 0x3B, 0x38, 0x84, 0x62,
                0x15, 0x6C, 0x64, 0x65, 0x20, 0xA3, 0xDF, 0xC6, 0x16, 0xC4, 0x1E, 0x74,
                0xBA, 0x07, 0xBB, 0xDD, 0xF1, 0xD6, 0x77, 0x22, 0x40, 0x92, 0xEE, 0x96,
                0x43, 0x05, 0x3D, 0x5E, 0xC1, 0x7C, 0xF5, 0xE9, 0xD2, 0x28, 0xAF, 0xB8,
                0xBA, 0xFC, 0x14, 0x10, 0x7C, 0xBC, 0xEB, 0xEE, 0xF5, 0xC0, 0xEE, 0x7B,
                0x05, 0x3E, 0x3F, 0xFF, 0x25, 0x76, 0x91, 0x05, 0x0B, 0x4D, 0xC8, 0x0A,
                0x9D, 0x50, 0xC5, 0x15, 0x64, 0x1C, 0xF6, 0xEE, 0x2B, 0x3B, 0xDF, 0x5A,
                0x57, 0x43, 0x0F, 0x50, 0xF0, 0x0C, 0xF4, 0x57, 0x9E, 0xED, 0x58, 0xD8,
                0xC3, 0x1D, 0x22, 0x9E, 0x08, 0x72, 0x48, 0xDF, 0xF0, 0x13, 0xC0, 0xB9,
                0x6B, 0x03, 0x8D, 0x16, 0x5A, 0x20, 0x00, 0x00
            };

            // take a copy of the destSpan using Binary Display
            // this will be a base64 string
            // use https://base64.guru/converter/decode/hex
            // to convert this to hex
            // then use Notepad++ and the regexp to insert spaces every second
            // "(..)" -> "\1 "
            // https://stackoverflow.com/questions/7480810/add-a-space-split-up-pairs-of-characters
            // https://superuser.com/questions/1088622/notepad-split-line-after-given-number-of-characters
            // then use HxD and paste the hex string into a new document
            // then use "Copy as C#"
            // destArray length is 1536 bytes = 512 x 3 bytes (24 bit)
            byte[] destArray = {
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x06, 0x00, 0x00,
                0x0C, 0x00, 0x00, 0x15, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x2A, 0x00, 0x00,
                0x38, 0x00, 0x00, 0x4B, 0x00, 0x00, 0x5B, 0x00, 0x00, 0x6E, 0x00, 0x00,
                0x84, 0x00, 0x00, 0x95, 0x00, 0x00, 0xAB, 0x00, 0x00, 0xBE, 0x00, 0x00,
                0xD0, 0x00, 0x00, 0xEA, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x12, 0x01, 0x00,
                0x29, 0x01, 0x00, 0x4B, 0x01, 0x00, 0x75, 0x01, 0x00, 0xAD, 0x01, 0x00,
                0xDE, 0x01, 0x00, 0x06, 0x02, 0x00, 0x34, 0x02, 0x00, 0x57, 0x02, 0x00,
                0x77, 0x02, 0x00, 0xB7, 0x02, 0x00, 0xD8, 0x02, 0x00, 0xCB, 0x02, 0x00,
                0xCD, 0x02, 0x00, 0xE4, 0x02, 0x00, 0xF6, 0x02, 0x00, 0xE7, 0x02, 0x00,
                0x23, 0x03, 0x00, 0x5C, 0x03, 0x00, 0xA0, 0x03, 0x00, 0xF0, 0x03, 0x00,
                0x34, 0x04, 0x00, 0x9E, 0x04, 0x00, 0xE6, 0x04, 0x00, 0xF0, 0x04, 0x00,
                0xBD, 0x04, 0x00, 0x7F, 0x04, 0x00, 0xB3, 0x04, 0x00, 0x4B, 0x05, 0x00,
                0x71, 0x05, 0x00, 0xAE, 0x05, 0x00, 0xEA, 0x05, 0x00, 0xF0, 0x05, 0x00,
                0x0A, 0x06, 0x00, 0x28, 0x06, 0x00, 0x42, 0x06, 0x00, 0x4B, 0x06, 0x00,
                0x5C, 0x06, 0x00, 0x20, 0x06, 0x00, 0xED, 0x05, 0x00, 0x2E, 0x06, 0x00,
                0xD8, 0x05, 0x00, 0x99, 0x05, 0x00, 0xF6, 0x05, 0x00, 0x9B, 0x05, 0x00,
                0x0C, 0x05, 0x00, 0xEF, 0x04, 0x00, 0x1C, 0x05, 0x00, 0x1D, 0x05, 0x00,
                0x8F, 0x04, 0x00, 0xE9, 0x03, 0x00, 0x75, 0x03, 0x00, 0x06, 0x03, 0x00,
                0x7D, 0x02, 0x00, 0xA7, 0x02, 0x00, 0x1C, 0x03, 0x00, 0x31, 0x03, 0x00,
                0x6E, 0x03, 0x00, 0xF1, 0x03, 0x00, 0x43, 0x04, 0x00, 0x50, 0x04, 0x00,
                0x3E, 0x04, 0x00, 0x66, 0x04, 0x00, 0xE3, 0x04, 0x00, 0x67, 0x05, 0x00,
                0x01, 0x05, 0x00, 0x84, 0x04, 0x00, 0xB9, 0x04, 0x00, 0xB0, 0x04, 0x00,
                0x0A, 0x04, 0x00, 0x92, 0x03, 0x00, 0x17, 0x04, 0x00, 0x37, 0x04, 0x00,
                0xF0, 0x03, 0x00, 0xE6, 0x03, 0x00, 0x3B, 0x04, 0x00, 0xC7, 0x04, 0x00,
                0x54, 0x05, 0x00, 0x5D, 0x05, 0x00, 0x58, 0x06, 0x00, 0xE7, 0x07, 0x00,
                0xDB, 0x08, 0x00, 0xDB, 0x08, 0x00, 0xBF, 0x08, 0x00, 0x97, 0x08, 0x00,
                0xB9, 0x07, 0x00, 0x34, 0x07, 0x00, 0x19, 0x07, 0x00, 0x97, 0x06, 0x00,
                0x5E, 0x05, 0x00, 0x0A, 0x04, 0x00, 0xB8, 0x03, 0x00, 0x47, 0x03, 0x00,
                0x80, 0x02, 0x00, 0x5B, 0x02, 0x00, 0x9E, 0x02, 0x00, 0xB9, 0x02, 0x00,
                0x27, 0x02, 0x00, 0x26, 0x02, 0x00, 0x09, 0x03, 0x00, 0x0B, 0x03, 0x00,
                0x55, 0x02, 0x00, 0x2E, 0x02, 0x00, 0x73, 0x02, 0x00, 0xD3, 0x01, 0x00,
                0xF8, 0x00, 0x00, 0x88, 0x00, 0x00, 0x94, 0x00, 0x00, 0x6F, 0x01, 0x00,
                0x24, 0x02, 0x00, 0x6E, 0x02, 0x00, 0xDE, 0x02, 0x00, 0xAD, 0x02, 0x00,
                0x68, 0x01, 0x00, 0xE2, 0xFF, 0xFF, 0xD1, 0xFE, 0xFF, 0x5D, 0xFE, 0xFF,
                0xFB, 0xFD, 0xFF, 0x8A, 0xFD, 0xFF, 0x1B, 0xFD, 0xFF, 0xDE, 0xFC, 0xFF,
                0x58, 0xFC, 0xFF, 0x8E, 0xFB, 0xFF, 0x1F, 0xFB, 0xFF, 0xFC, 0xFA, 0xFF,
                0x8D, 0xFA, 0xFF, 0x1C, 0xFB, 0xFF, 0x0B, 0xFC, 0xFF, 0x4B, 0xFB, 0xFF,
                0xB9, 0xF9, 0xFF, 0xC2, 0xF9, 0xFF, 0xCF, 0xF9, 0xFF, 0x50, 0xF9, 0xFF,
                0x6A, 0xF9, 0xFF, 0x66, 0xF9, 0xFF, 0x71, 0xF9, 0xFF, 0x87, 0xFA, 0xFF,
                0x76, 0xFB, 0xFF, 0xA2, 0xFB, 0xFF, 0x87, 0xFB, 0xFF, 0x78, 0xFB, 0xFF,
                0x33, 0xFC, 0xFF, 0x94, 0xFB, 0xFF, 0x35, 0xFA, 0xFF, 0xF0, 0xF9, 0xFF,
                0x10, 0xFA, 0xFF, 0xE5, 0xF8, 0xFF, 0xCA, 0xF8, 0xFF, 0x12, 0xFA, 0xFF,
                0xA2, 0xFA, 0xFF, 0x29, 0xFA, 0xFF, 0x90, 0xFA, 0xFF, 0xB9, 0xFB, 0xFF,
                0x69, 0xFC, 0xFF, 0x55, 0xFD, 0xFF, 0x70, 0xFD, 0xFF, 0x69, 0xFE, 0xFF,
                0x80, 0xFE, 0xFF, 0xA8, 0xFE, 0xFF, 0x42, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF,
                0xE9, 0xFF, 0xFF, 0x87, 0x00, 0x00, 0x02, 0x02, 0x00, 0x4B, 0x02, 0x00,
                0xEB, 0x01, 0x00, 0xA1, 0x01, 0x00, 0xEF, 0x00, 0x00, 0x21, 0xFF, 0xFF,
                0xFB, 0xFD, 0xFF, 0xF9, 0xFD, 0xFF, 0xF0, 0xFC, 0xFF, 0x2B, 0xFB, 0xFF,
                0x35, 0xFA, 0xFF, 0x57, 0xFA, 0xFF, 0x4A, 0xF9, 0xFF, 0xF3, 0xF7, 0xFF,
                0x54, 0xF7, 0xFF, 0xDC, 0xF7, 0xFF, 0x03, 0xF9, 0xFF, 0xCA, 0xF9, 0xFF,
                0xC3, 0xFA, 0xFF, 0x09, 0xFB, 0xFF, 0xDB, 0xFB, 0xFF, 0xDB, 0xFC, 0xFF,
                0x35, 0xFC, 0xFF, 0xC3, 0xFA, 0xFF, 0x6B, 0xFA, 0xFF, 0xF0, 0xF9, 0xFF,
                0x50, 0xF9, 0xFF, 0x69, 0xF8, 0xFF, 0x6A, 0xF6, 0xFF, 0xC7, 0xF5, 0xFF,
                0xCA, 0xF5, 0xFF, 0xFC, 0xF5, 0xFF, 0xC2, 0xF5, 0xFF, 0xB5, 0xF5, 0xFF,
                0x7A, 0xF6, 0xFF, 0xF3, 0xF6, 0xFF, 0x5A, 0xF7, 0xFF, 0x34, 0xF9, 0xFF,
                0xE5, 0xFA, 0xFF, 0xA8, 0xFA, 0xFF, 0x73, 0xFA, 0xFF, 0xDF, 0xFB, 0xFF,
                0x7C, 0xFC, 0xFF, 0xC1, 0xFB, 0xFF, 0xBD, 0xFB, 0xFF, 0xE8, 0xFA, 0xFF,
                0xE0, 0xF9, 0xFF, 0xFA, 0xF9, 0xFF, 0x85, 0xFA, 0xFF, 0x7C, 0xFA, 0xFF,
                0x02, 0xFA, 0xFF, 0x03, 0xFA, 0xFF, 0xFF, 0xFA, 0xFF, 0x6F, 0xFB, 0xFF,
                0xDA, 0xFA, 0xFF, 0xB0, 0xFA, 0xFF, 0x08, 0xFC, 0xFF, 0x45, 0xFC, 0xFF,
                0x35, 0xFC, 0xFF, 0x39, 0xFD, 0xFF, 0x12, 0xFE, 0xFF, 0x3F, 0xFF, 0xFF,
                0xBE, 0xFF, 0xFF, 0xF8, 0xFF, 0xFF, 0x39, 0x00, 0x00, 0x6D, 0x00, 0x00,
                0xD9, 0xFE, 0xFF, 0x46, 0xFD, 0xFF, 0x06, 0xFE, 0xFF, 0x61, 0xFE, 0xFF,
                0x41, 0xFE, 0xFF, 0xD5, 0xFE, 0xFF, 0xEC, 0xFE, 0xFF, 0xD5, 0xFE, 0xFF,
                0x77, 0x00, 0x00, 0xB9, 0x00, 0x00, 0xD6, 0xFF, 0xFF, 0x3C, 0xFF, 0xFF,
                0xE4, 0xFE, 0xFF, 0x71, 0xFE, 0xFF, 0x83, 0xFD, 0xFF, 0x88, 0xFC, 0xFF,
                0xD9, 0xFA, 0xFF, 0xA3, 0xF9, 0xFF, 0x68, 0xF9, 0xFF, 0x17, 0xFA, 0xFF,
                0xBC, 0xFA, 0xFF, 0xD3, 0xF9, 0xFF, 0xC4, 0xF9, 0xFF, 0x9F, 0xF9, 0xFF,
                0xAA, 0xF8, 0xFF, 0x58, 0xF8, 0xFF, 0xE1, 0xF7, 0xFF, 0x49, 0xF7, 0xFF,
                0x4C, 0xF7, 0xFF, 0x08, 0xF7, 0xFF, 0x8E, 0xF7, 0xFF, 0x7A, 0xF8, 0xFF,
                0x78, 0xF9, 0xFF, 0xC2, 0xF8, 0xFF, 0x98, 0xF7, 0xFF, 0xE9, 0xF7, 0xFF,
                0x67, 0xF7, 0xFF, 0x62, 0xF7, 0xFF, 0xFE, 0xF7, 0xFF, 0x30, 0xF8, 0xFF,
                0xEB, 0xF6, 0xFF, 0x78, 0xF6, 0xFF, 0x1B, 0xF6, 0xFF, 0xE3, 0xF4, 0xFF,
                0x45, 0xF4, 0xFF, 0xFB, 0xF4, 0xFF, 0x71, 0xF5, 0xFF, 0xF4, 0xF4, 0xFF,
                0x1A, 0xF4, 0xFF, 0x3A, 0xF4, 0xFF, 0xE7, 0xF5, 0xFF, 0xF1, 0xF6, 0xFF,
                0xC9, 0xF6, 0xFF, 0x41, 0xF7, 0xFF, 0x60, 0xF8, 0xFF, 0xEA, 0xF8, 0xFF,
                0xA8, 0xF9, 0xFF, 0xB6, 0xFA, 0xFF, 0xD0, 0xF9, 0xFF, 0x8D, 0xF9, 0xFF,
                0x19, 0xFA, 0xFF, 0xFA, 0xF9, 0xFF, 0x41, 0xF8, 0xFF, 0x9B, 0xF6, 0xFF,
                0x7A, 0xF6, 0xFF, 0xED, 0xF6, 0xFF, 0x9F, 0xF6, 0xFF, 0x77, 0xF6, 0xFF,
                0x97, 0xF8, 0xFF, 0x99, 0xFA, 0xFF, 0xE6, 0xFB, 0xFF, 0xE7, 0xFC, 0xFF,
                0x47, 0xFE, 0xFF, 0x17, 0x00, 0x00, 0x54, 0x00, 0x00, 0xDA, 0x00, 0x00,
                0x8B, 0x01, 0x00, 0x91, 0x01, 0x00, 0x18, 0x00, 0x00, 0xA4, 0xFE, 0xFF,
                0xBA, 0xFE, 0xFF, 0x7E, 0xFE, 0xFF, 0xFF, 0xFC, 0xFF, 0x5F, 0xFB, 0xFF,
                0x89, 0xFA, 0xFF, 0x4D, 0xFA, 0xFF, 0x01, 0xFB, 0xFF, 0xCC, 0xFA, 0xFF,
                0xAC, 0xF9, 0xFF, 0xD8, 0xF9, 0xFF, 0x35, 0xFB, 0xFF, 0x8C, 0xFC, 0xFF,
                0x9C, 0xFD, 0xFF, 0x99, 0xFD, 0xFF, 0x6C, 0xFD, 0xFF, 0x91, 0xFD, 0xFF,
                0xEF, 0xFE, 0xFF, 0x72, 0x00, 0x00, 0xF8, 0x00, 0x00, 0xCD, 0x00, 0x00,
                0xC7, 0x01, 0x00, 0x7E, 0x02, 0x00, 0x25, 0x02, 0x00, 0xBC, 0x00, 0x00,
                0x90, 0xFF, 0xFF, 0x1C, 0xFF, 0xFF, 0xC2, 0xFF, 0xFF, 0x99, 0xFE, 0xFF,
                0xC2, 0xFD, 0xFF, 0x43, 0xFD, 0xFF, 0x1F, 0xFE, 0xFF, 0xB0, 0xFD, 0xFF,
                0xFD, 0xFD, 0xFF, 0xB8, 0xFE, 0xFF, 0x7A, 0xFF, 0xFF, 0x0A, 0xFF, 0xFF,
                0x2F, 0xFE, 0xFF, 0x41, 0xFE, 0xFF, 0xCF, 0xFE, 0xFF, 0x08, 0xFF, 0xFF,
                0xC3, 0xFF, 0xFF, 0x39, 0x00, 0x00, 0xF7, 0xFF, 0xFF, 0x8B, 0xFF, 0xFF,
                0x8D, 0xFD, 0xFF, 0xDF, 0xFB, 0xFF, 0x9E, 0xFB, 0xFF, 0x51, 0xFC, 0xFF,
                0x51, 0xFC, 0xFF, 0xE0, 0xFC, 0xFF, 0x54, 0xFE, 0xFF, 0x31, 0x01, 0x00,
                0x82, 0x03, 0x00, 0xB9, 0x03, 0x00, 0xA6, 0x03, 0x00, 0x99, 0x04, 0x00,
                0xD0, 0x04, 0x00, 0xE1, 0x03, 0x00, 0x61, 0x04, 0x00, 0x19, 0x05, 0x00,
                0xC2, 0x04, 0x00, 0x72, 0x03, 0x00, 0xDE, 0x01, 0x00, 0x68, 0x01, 0x00,
                0x84, 0x01, 0x00, 0x1D, 0x02, 0x00, 0x77, 0x02, 0x00, 0x04, 0x04, 0x00,
                0xD6, 0x05, 0x00, 0x74, 0x07, 0x00, 0xF7, 0x07, 0x00, 0x8E, 0x08, 0x00,
                0xD9, 0x08, 0x00, 0x73, 0x09, 0x00, 0x62, 0x08, 0x00, 0xC8, 0x06, 0x00,
                0xEF, 0x06, 0x00, 0x2D, 0x07, 0x00, 0xDE, 0x05, 0x00, 0xBC, 0x03, 0x00,
                0xCF, 0x03, 0x00, 0x06, 0x03, 0x00, 0x2A, 0x02, 0x00, 0x69, 0x01, 0x00,
                0x53, 0xFF, 0xFF, 0x47, 0xFE, 0xFF, 0x5D, 0xFE, 0xFF, 0x3B, 0xFF, 0xFF,
                0xF6, 0xFF, 0xFF, 0x05, 0x02, 0x00, 0x27, 0x04, 0x00, 0x68, 0x05, 0x00,
                0x6A, 0x05, 0x00, 0x55, 0x05, 0x00, 0xB9, 0x05, 0x00, 0x54, 0x04, 0x00,
                0x7B, 0x02, 0x00, 0x31, 0x03, 0x00, 0x17, 0x03, 0x00, 0x09, 0x02, 0x00,
                0xBD, 0x00, 0x00, 0x88, 0xFF, 0xFF, 0xEE, 0xFE, 0xFF, 0x40, 0xFE, 0xFF,
                0x11, 0xFE, 0xFF, 0x37, 0xFD, 0xFF, 0xAC, 0xFC, 0xFF, 0x8C, 0xFD, 0xFF,
                0xCE, 0xFE, 0xFF, 0x24, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x55, 0x02, 0x00,
                0x58, 0x03, 0x00, 0xFB, 0x02, 0x00, 0xD6, 0x03, 0x00, 0x31, 0x04, 0x00,
                0x93, 0x03, 0x00, 0xD4, 0x02, 0x00, 0x48, 0x02, 0x00, 0x09, 0x01, 0x00,
                0xF6, 0xFF, 0xFF, 0xE7, 0xFE, 0xFF, 0xE1, 0xFD, 0xFF, 0x6A, 0xFE, 0xFF,
                0x8A, 0xFF, 0xFF, 0x73, 0xFE, 0xFF, 0xA0, 0xFD, 0xFF, 0xF0, 0xFE, 0xFF,
                0xD8, 0x00, 0x00, 0x36, 0x02, 0x00, 0xCE, 0x01, 0x00, 0xA3, 0x01, 0x00,
                0x17, 0x03, 0x00, 0xA4, 0x05, 0x00, 0x02, 0x07, 0x00, 0xB0, 0x05, 0x00,
                0x95, 0x05, 0x00, 0xA9, 0x05, 0x00, 0x2B, 0x05, 0x00, 0x1C, 0x04, 0x00,
                0x91, 0x03, 0x00, 0xEF, 0x02, 0x00, 0x70, 0x00, 0x00, 0x6B, 0xFF, 0xFF,
                0x96, 0xFF, 0xFF, 0xD4, 0xFE, 0xFF, 0xBB, 0xFE, 0xFF, 0x52, 0xFF, 0xFF,
                0x0D, 0x00, 0x00, 0x66, 0x00, 0x00, 0x7C, 0x02, 0x00, 0x8F, 0x04, 0x00,
                0xE5, 0x04, 0x00, 0x82, 0x05, 0x00, 0x2C, 0x06, 0x00, 0x83, 0x06, 0x00,
                0xB5, 0x04, 0x00, 0x16, 0x04, 0x00, 0xF3, 0x03, 0x00, 0xBD, 0x02, 0x00,
                0xB6, 0x01, 0x00, 0x10, 0x01, 0x00, 0x7A, 0x01, 0x00, 0xB7, 0x01, 0x00,
                0xDF, 0x01, 0x00, 0xAE, 0x02, 0x00, 0x96, 0x02, 0x00, 0x2B, 0x02, 0x00,
                0x97, 0x01, 0x00, 0xEF, 0x01, 0x00, 0x6A, 0x02, 0x00, 0xE1, 0x02, 0x00,
                0xF2, 0x01, 0x00, 0x7B, 0x02, 0x00, 0x5F, 0x03, 0x00, 0x31, 0x03, 0x00,
                0xB7, 0x02, 0x00, 0xCA, 0x02, 0x00, 0x02, 0x02, 0x00, 0xB0, 0xFF, 0xFF,
                0x31, 0xFE, 0xFF, 0x99, 0xFF, 0xFF, 0x4D, 0x00, 0x00, 0x55, 0x00, 0x00
            };

            // If 'Bits' > 0 then data stored in the block are not sample values, but deltas (differences)
            int nbits = 11;
            int baseValue = 0;

            // NCW to Int24
            var temp24 = new Int24[NCWParser.NCW_SAMPLES];
            BitProcess.Fill24_bits(NCWParser.NCW_SAMPLES, nbits, inputArray, temp24, baseValue);

            // sourceSpan is 512 24-bit samples (NCW_SAMPLES = 512) 
            var temp24Span = MemoryMarshal.Cast<Int24, byte>(temp24);

            // source array is 512 24-bit samples = 512 x 3 bytes per sample = 1536 bytes
            var temp24Array = temp24Span.ToArray();
            Assert.Equal(temp24Array, destArray);

            // Int24 to NCW            
            // convert the samples into deltas
            var temp24dif = new Int24[NCWParser.NCW_SAMPLES];
            NCWParser.DiffArray24(temp24, temp24dif, out int max, out int min);

            // 11 bits x 64 = 704 bytes of 24 bit ncw samples
            byte[] tempB = new byte[nbits * 64 * 3]; // 704 x 3 = 2112 bytes
            BitProcess.EncodeL_24(NCWParser.NCW_SAMPLES, nbits, temp24dif, tempB);

            // only keep nbits * 64
            var tempBSpan = tempB.AsSpan().Slice(0, nbits * 64);
            var tempBArray = tempBSpan.ToArray();
            Assert.Equal(tempBArray, inputArray);
        }
    }
}